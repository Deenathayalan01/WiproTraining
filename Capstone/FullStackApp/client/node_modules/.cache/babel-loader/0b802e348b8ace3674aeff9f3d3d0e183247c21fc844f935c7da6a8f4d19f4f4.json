{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mikkalya\\\\Desktop\\\\FullStackAppReact\\\\ChatApp\\\\client\\\\src\\\\pages\\\\Chat.js\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { addMessage, setMessages } from '../store/chatSlice';\n// import { sendMessage, receiveMessages } from '../services/socketService';\n// import axios from 'axios';\n\n// const Chat = () => {\n//   const [text, setText] = useState('');\n//   const messages = useSelector((state) => state.chat.messages);\n//   const dispatch = useDispatch();\n\n//   useEffect(() => {\n//     axios.get('http://localhost:5000/api/messages') // Fetch chat history\n//       .then((res) => dispatch(setMessages(res.data)));\n\n//     receiveMessages((message) => {\n//       dispatch(addMessage(message));\n//     });\n//   }, [dispatch]);\n\n//   const handleSend = () => {\n//     const message = { text, sender: 'User' }; // Replace with actual user data\n//     sendMessage(message);\n//     setText('');\n//   };\n\n//   return (\n//     <div>\n//       <div>\n//         {messages.map((msg, index) => (\n//           <p key={index}><strong>{msg.sender}:</strong> {msg.text}</p>\n//         ))}\n//       </div>\n//       <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} />\n//       <button onClick={handleSend}>Send</button>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addMessage, setMessages } from '../store/chatSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [text, setText] = useState('');\n  const messages = useSelector(state => state.chat.messages);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    // Use mock messages instead of API call\n    const mockMessages = [{\n      sender: 'Alice',\n      text: 'Hello!'\n    }, {\n      sender: 'Bob',\n      text: 'Hi, how are you?'\n    }];\n    dispatch(setMessages(mockMessages));\n  }, [dispatch]);\n  const handleSend = () => {\n    if (text.trim()) {\n      const message = {\n        sender: 'You',\n        text\n      };\n      dispatch(addMessage(message)); // Directly update Redux state\n      setText('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.sender, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 26\n        }, this), \" \", msg.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: text,\n      onChange: e => setText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSend,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"2tbZ+FIioWERNxsLjAoZfuOU0SY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useEffect","useState","useDispatch","useSelector","addMessage","setMessages","jsxDEV","_jsxDEV","Chat","_s","text","setText","messages","state","chat","dispatch","mockMessages","sender","handleSend","trim","message","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Mikkalya/Desktop/FullStackAppReact/ChatApp/client/src/pages/Chat.js"],"sourcesContent":["// import { useEffect, useState } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { addMessage, setMessages } from '../store/chatSlice';\r\n// import { sendMessage, receiveMessages } from '../services/socketService';\r\n// import axios from 'axios';\r\n\r\n// const Chat = () => {\r\n//   const [text, setText] = useState('');\r\n//   const messages = useSelector((state) => state.chat.messages);\r\n//   const dispatch = useDispatch();\r\n\r\n//   useEffect(() => {\r\n//     axios.get('http://localhost:5000/api/messages') // Fetch chat history\r\n//       .then((res) => dispatch(setMessages(res.data)));\r\n\r\n//     receiveMessages((message) => {\r\n//       dispatch(addMessage(message));\r\n//     });\r\n//   }, [dispatch]);\r\n\r\n//   const handleSend = () => {\r\n//     const message = { text, sender: 'User' }; // Replace with actual user data\r\n//     sendMessage(message);\r\n//     setText('');\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <div>\r\n//         {messages.map((msg, index) => (\r\n//           <p key={index}><strong>{msg.sender}:</strong> {msg.text}</p>\r\n//         ))}\r\n//       </div>\r\n//       <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} />\r\n//       <button onClick={handleSend}>Send</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Chat;\r\n\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addMessage, setMessages } from '../store/chatSlice';\r\n\r\nconst Chat = () => {\r\n  const [text, setText] = useState('');\r\n  const messages = useSelector((state) => state.chat.messages);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    // Use mock messages instead of API call\r\n    const mockMessages = [\r\n      { sender: 'Alice', text: 'Hello!' },\r\n      { sender: 'Bob', text: 'Hi, how are you?' }\r\n    ];\r\n    dispatch(setMessages(mockMessages));\r\n  }, [dispatch]);\r\n\r\n  const handleSend = () => {\r\n    if (text.trim()) {\r\n      const message = { sender: 'You', text };\r\n      dispatch(addMessage(message)); // Directly update Redux state\r\n      setText('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {messages.map((msg, index) => (\r\n          <p key={index}><strong>{msg.sender}:</strong> {msg.text}</p>\r\n        ))}\r\n      </div>\r\n      <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} />\r\n      <button onClick={handleSend}>Send</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU,EAAEC,WAAW,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMW,QAAQ,GAAGT,WAAW,CAAEU,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACF,QAAQ,CAAC;EAC5D,MAAMG,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,YAAY,GAAG,CACnB;MAAEC,MAAM,EAAE,OAAO;MAAEP,IAAI,EAAE;IAAS,CAAC,EACnC;MAAEO,MAAM,EAAE,KAAK;MAAEP,IAAI,EAAE;IAAmB,CAAC,CAC5C;IACDK,QAAQ,CAACV,WAAW,CAACW,YAAY,CAAC,CAAC;EACrC,CAAC,EAAE,CAACD,QAAQ,CAAC,CAAC;EAEd,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIR,IAAI,CAACS,IAAI,CAAC,CAAC,EAAE;MACf,MAAMC,OAAO,GAAG;QAAEH,MAAM,EAAE,KAAK;QAAEP;MAAK,CAAC;MACvCK,QAAQ,CAACX,UAAU,CAACgB,OAAO,CAAC,CAAC,CAAC,CAAC;MAC/BT,OAAO,CAAC,EAAE,CAAC;IACb;EACF,CAAC;EAED,oBACEJ,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EACGT,QAAQ,CAACU,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvBjB,OAAA;QAAAc,QAAA,gBAAed,OAAA;UAAAc,QAAA,GAASE,GAAG,CAACN,MAAM,EAAC,GAAC;QAAA;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACL,GAAG,CAACb,IAAI;MAAA,GAA/Cc,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA8C,CAC5D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNrB,OAAA;MAAOsB,IAAI,EAAC,MAAM;MAACC,KAAK,EAAEpB,IAAK;MAACqB,QAAQ,EAAGC,CAAC,IAAKrB,OAAO,CAACqB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5ErB,OAAA;MAAQ2B,OAAO,EAAEhB,UAAW;MAAAG,QAAA,EAAC;IAAI;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV,CAAC;AAACnB,EAAA,CAjCID,IAAI;EAAA,QAESL,WAAW,EACXD,WAAW;AAAA;AAAAiC,EAAA,GAHxB3B,IAAI;AAmCV,eAAeA,IAAI;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}