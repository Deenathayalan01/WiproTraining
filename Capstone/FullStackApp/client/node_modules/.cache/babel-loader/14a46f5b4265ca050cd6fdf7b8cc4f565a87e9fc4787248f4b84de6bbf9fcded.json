{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mikkalya\\\\Desktop\\\\FullStackAppReact\\\\ChatApp\\\\client\\\\src\\\\pages\\\\Chat.js\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { addMessage, setMessages } from '../store/chatSlice';\n// import { sendMessage, receiveMessages } from '../services/socketService';\n// import axios from 'axios';\n\n// const Chat = () => {\n//   const [text, setText] = useState('');\n//   const messages = useSelector((state) => state.chat.messages);\n//   const dispatch = useDispatch();\n\n//   useEffect(() => {\n//     axios.get('http://localhost:5000/api/messages') // Fetch chat history\n//       .then((res) => dispatch(setMessages(res.data)));\n\n//     receiveMessages((message) => {\n//       dispatch(addMessage(message));\n//     });\n//   }, [dispatch]);\n\n//   const handleSend = () => {\n//     const message = { text, sender: 'User' }; // Replace with actual user data\n//     sendMessage(message);\n//     setText('');\n//   };\n\n//   return (\n//     <div>\n//       <div>\n//         {messages.map((msg, index) => (\n//           <p key={index}><strong>{msg.sender}:</strong> {msg.text}</p>\n//         ))}\n//       </div>\n//       <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} />\n//       <button onClick={handleSend}>Send</button>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n\n// import { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { addMessage, setMessages } from '../store/chatSlice';\n\n// const Chat = () => {\n//   const [text, setText] = useState('');\n//   const messages = useSelector((state) => state.chat.messages);\n//   const dispatch = useDispatch();\n\n//   useEffect(() => {\n//     // Use mock messages instead of API call\n//     const mockMessages = [\n//       { sender: 'Alice', text: 'Hello!' },\n//       { sender: 'Bob', text: 'Hi, how are you?' }\n//     ];\n//     dispatch(setMessages(mockMessages));\n//   }, [dispatch]);\n\n//   const handleSend = () => {\n//     if (text.trim()) {\n//       const message = { sender: 'You', text };\n//       dispatch(addMessage(message)); // Directly update Redux state\n//       setText('');\n//     }\n//   };\n\n//   return (\n//     <div className=\"d-flex flex-column vh-100 bg-light\">\n//       {/* Chat Header */}\n//       <div className=\"bg-primary text-white py-3 text-center fw-bold\">\n//         Chat Room\n//       </div>\n\n//       {/* Chat Messages */}\n//       <div className=\"flex-grow-1 overflow-auto p-3\" style={{ maxHeight: \"75vh\" }}>\n//         {messages.map((msg, index) => (\n//           <div \n//             key={index} \n//             className={`d-flex mb-2 ${msg.sender === 'You' ? 'justify-content-end' : 'justify-content-start'}`}\n//           >\n//             <div className={`p-2 rounded-3 ${msg.sender === 'You' ? 'bg-primary text-white' : 'bg-secondary text-white'}`} \n//                  style={{ maxWidth: \"75%\" }}>\n//               <small className=\"d-block fw-bold\">{msg.sender}</small>\n//               {msg.text}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Chat Input */}\n//       <div className=\"p-3 bg-white border-top d-flex\">\n//         <input \n//           type=\"text\" \n//           className=\"form-control me-2\" \n//           placeholder=\"Type a message...\" \n//           value={text} \n//           onChange={(e) => setText(e.target.value)} \n//         />\n//         <button className=\"btn btn-primary\" onClick={handleSend}>Send</button>\n//       </div>\n//     </div>\n//   );\n// };\n// export default Chat;\n\nimport { useState, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addMessage } from '../store/chatSlice';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [text, setText] = useState('');\n  const messages = useSelector(state => state.chat.messages);\n  const dispatch = useDispatch();\n  const chatEndRef = useRef(null);\n  useEffect(() => {\n    var _chatEndRef$current;\n    // Auto-scroll to latest message\n    (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleSend = () => {\n    if (text.trim()) {\n      const message = {\n        sender: 'You',\n        text\n      };\n      dispatch(addMessage(message));\n      setText('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex flex-column vh-100 bg-light\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-primary text-white py-3 text-center fw-bold\",\n      children: \"Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow-1 overflow-auto p-3\",\n      style: {\n        maxHeight: \"75vh\"\n      },\n      children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-muted text-center mt-5\",\n        children: \"Start a conversation...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this) : messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `d-flex mb-2 ${msg.sender === 'You' ? 'justify-content-end' : 'justify-content-start'}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `p-2 rounded-3 ${msg.sender === 'You' ? 'bg-primary text-white' : 'bg-secondary text-white'}`,\n          style: {\n            maxWidth: \"75%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"d-block fw-bold\",\n            children: msg.sender\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 17\n          }, this), msg.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chatEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-3 bg-white border-top d-flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control me-2\",\n        placeholder: \"Type a message...\",\n        value: text,\n        onChange: e => setText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"gU2yJXYhAMBUdxYO5JgcrS/SUKY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useState","useEffect","useRef","useDispatch","useSelector","addMessage","jsxDEV","_jsxDEV","Chat","_s","text","setText","messages","state","chat","dispatch","chatEndRef","_chatEndRef$current","current","scrollIntoView","behavior","handleSend","trim","message","sender","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","maxHeight","length","map","msg","index","maxWidth","ref","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Mikkalya/Desktop/FullStackAppReact/ChatApp/client/src/pages/Chat.js"],"sourcesContent":["// import { useEffect, useState } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { addMessage, setMessages } from '../store/chatSlice';\r\n// import { sendMessage, receiveMessages } from '../services/socketService';\r\n// import axios from 'axios';\r\n\r\n// const Chat = () => {\r\n//   const [text, setText] = useState('');\r\n//   const messages = useSelector((state) => state.chat.messages);\r\n//   const dispatch = useDispatch();\r\n\r\n//   useEffect(() => {\r\n//     axios.get('http://localhost:5000/api/messages') // Fetch chat history\r\n//       .then((res) => dispatch(setMessages(res.data)));\r\n\r\n//     receiveMessages((message) => {\r\n//       dispatch(addMessage(message));\r\n//     });\r\n//   }, [dispatch]);\r\n\r\n//   const handleSend = () => {\r\n//     const message = { text, sender: 'User' }; // Replace with actual user data\r\n//     sendMessage(message);\r\n//     setText('');\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <div>\r\n//         {messages.map((msg, index) => (\r\n//           <p key={index}><strong>{msg.sender}:</strong> {msg.text}</p>\r\n//         ))}\r\n//       </div>\r\n//       <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} />\r\n//       <button onClick={handleSend}>Send</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Chat;\r\n\r\n\r\n// import { useEffect, useState } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { addMessage, setMessages } from '../store/chatSlice';\r\n\r\n// const Chat = () => {\r\n//   const [text, setText] = useState('');\r\n//   const messages = useSelector((state) => state.chat.messages);\r\n//   const dispatch = useDispatch();\r\n\r\n//   useEffect(() => {\r\n//     // Use mock messages instead of API call\r\n//     const mockMessages = [\r\n//       { sender: 'Alice', text: 'Hello!' },\r\n//       { sender: 'Bob', text: 'Hi, how are you?' }\r\n//     ];\r\n//     dispatch(setMessages(mockMessages));\r\n//   }, [dispatch]);\r\n\r\n//   const handleSend = () => {\r\n//     if (text.trim()) {\r\n//       const message = { sender: 'You', text };\r\n//       dispatch(addMessage(message)); // Directly update Redux state\r\n//       setText('');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"d-flex flex-column vh-100 bg-light\">\r\n//       {/* Chat Header */}\r\n//       <div className=\"bg-primary text-white py-3 text-center fw-bold\">\r\n//         Chat Room\r\n//       </div>\r\n\r\n//       {/* Chat Messages */}\r\n//       <div className=\"flex-grow-1 overflow-auto p-3\" style={{ maxHeight: \"75vh\" }}>\r\n//         {messages.map((msg, index) => (\r\n//           <div \r\n//             key={index} \r\n//             className={`d-flex mb-2 ${msg.sender === 'You' ? 'justify-content-end' : 'justify-content-start'}`}\r\n//           >\r\n//             <div className={`p-2 rounded-3 ${msg.sender === 'You' ? 'bg-primary text-white' : 'bg-secondary text-white'}`} \r\n//                  style={{ maxWidth: \"75%\" }}>\r\n//               <small className=\"d-block fw-bold\">{msg.sender}</small>\r\n//               {msg.text}\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n\r\n//       {/* Chat Input */}\r\n//       <div className=\"p-3 bg-white border-top d-flex\">\r\n//         <input \r\n//           type=\"text\" \r\n//           className=\"form-control me-2\" \r\n//           placeholder=\"Type a message...\" \r\n//           value={text} \r\n//           onChange={(e) => setText(e.target.value)} \r\n//         />\r\n//         <button className=\"btn btn-primary\" onClick={handleSend}>Send</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n// export default Chat;\r\n\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addMessage } from '../store/chatSlice';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst Chat = () => {\r\n  const [text, setText] = useState('');\r\n  const messages = useSelector((state) => state.chat.messages);\r\n  const dispatch = useDispatch();\r\n  const chatEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Auto-scroll to latest message\r\n    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const handleSend = () => {\r\n    if (text.trim()) {\r\n      const message = { sender: 'You', text };\r\n      dispatch(addMessage(message));\r\n      setText('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column vh-100 bg-light\">\r\n      {/* Chat Header */}\r\n      <div className=\"bg-primary text-white py-3 text-center fw-bold\">\r\n        Chat Room\r\n      </div>\r\n\r\n      {/* Chat Messages */}\r\n      <div className=\"flex-grow-1 overflow-auto p-3\" style={{ maxHeight: \"75vh\" }}>\r\n        {messages.length === 0 ? (\r\n          <p className=\"text-muted text-center mt-5\">Start a conversation...</p>\r\n        ) : (\r\n          messages.map((msg, index) => (\r\n            <div \r\n              key={index} \r\n              className={`d-flex mb-2 ${msg.sender === 'You' ? 'justify-content-end' : 'justify-content-start'}`}\r\n            >\r\n              <div className={`p-2 rounded-3 ${msg.sender === 'You' ? 'bg-primary text-white' : 'bg-secondary text-white'}`} \r\n                   style={{ maxWidth: \"75%\" }}>\r\n                <small className=\"d-block fw-bold\">{msg.sender}</small>\r\n                {msg.text}\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n        <div ref={chatEndRef} /> {/* Auto-scroll reference */}\r\n      </div>\r\n\r\n      {/* Chat Input */}\r\n      <div className=\"p-3 bg-white border-top d-flex\">\r\n        <input \r\n          type=\"text\" \r\n          className=\"form-control me-2\" \r\n          placeholder=\"Type a message...\" \r\n          value={text} \r\n          onChange={(e) => setText(e.target.value)} \r\n        />\r\n        <button className=\"btn btn-primary\" onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}